## Project Description
LLM Chatbot Frontend UI
- 這個專案是使用 `React` 和 `TypeScript` 開發 並透過 `yarn` 進行套件管理
    - 你不需要編輯 `package.json` 你也不需要執行安裝套件的命令 你只需要提醒我安裝你需要的套件

## Supporting Features
- 當使用者任務是寫代碼時
    - 右邊會彈出一個 `markdown editor` a.k.a `MarkdownCanvas`
    - 當第一個 "\`\`\`" 出現時開始計算行數, 當出現第五行時就自動把整個代碼框透過 `Streaming` 的方式輸出到 `MarkdownCanvas` 內
- MarkdownCanvas和ChatBox之間會有一個 `ResizeBox` 用於給使用者調整每一區塊的大小
- 當使用者框選出一段文字後
    - 會有一個 `ContextMenu` 彈出來
    - 當使用者點擊 `Ask GPT` 時會將選取的文字傳給 `ChatBox` 並且等待使用者輸入問題後送出
- 當使用者點擊 `Generate Image` 時會透過 `generateImageAndText` 來產生圖片與對應的文字
    - 當圖片生成完畢後會同時與文字渲染到 `ChatBox`
- 每一段 LLM 的回應下方新增幾個按鈕
    - `Copy`
        - 當使用者點擊這個按鈕時 會將該段回應的內容複製到剪貼簿
    - `Edit`
        - 當使用者點擊這個按鈕時 會將該段回應變成可編輯狀態 並且有額外一個 Send 按鈕 讓使用者修改以後點選送出
        - 當使用者編輯完畢後 點擊 `Send` 按鈕會將編輯後的內容送出
    - `Delete`
        - 當使用者點擊這個按鈕時 會將該段回應刪除
    - `Regenerate`
        - 當使用者點擊這個按鈕時 會將該段對話刪除 並重新生成一次對話
        - 當使用者編輯完畢後 點擊 `Send` 按鈕會將編輯後的內容送出
- 使用者可以透過電腦的ctrl + v 來貼上圖片 貼上以後要送進chat completion

## TODO Features
- 幫我把 generateImageAndText 這個功能的流程改寫一下 正確的流程應該是 先透過 image generation 來產生圖片 圖片產生以後將 image_url 放進 chatCompletion 來生成對應的圖片敘述 回答的效果會比較好
- 請幫我增加一個功能 當使用者用滑鼠把某段字反白時 希望可以跳出一個選項在反白的字下面
    - `Ask GPT`
        - 當使用者點擊這個選項時 將反白的字當成引用放進 Chatbox 並且等待使用者輸入問題後送出

        - 當使用者點擊這個選項時 彈出一個臨時的小視窗 那個小視窗是一個小型的chatbox 將反白的字當成引用 並讓user輸入他想問的問題
            但當實際調用 `chatCompletion` 的時候 需要將Chatbox的所有對話紀錄 和 反白的字 和 使用者輸入的問題一起送給 `chatCompletion` 讓他生成一段回覆
            回覆的部分要用streaming的方式生成在臨時的Chatbox

- 請幫我增加一個功能 在聊天框中新增一個可選的選項叫做 生成圖像 當生成圖像是被選取的狀態 要trigger兩件事情
    - 將訊息透過下面這種方式來送出 以取得 base64 圖片
        ```
        client.images.generate({
            prompt: "a cute cat",
            n: 1,
            model: "dall-e-3"
            response_format: "b64_json"
        })
        ```
    - 將訊息同時透過 chatCompletion 讓他生成短的回覆
- 當兩件事情都做完以後 請將該圖片渲染到ChatBox中 讓ChatBox顯示該圖片
- 這兩件事情可以正合成一個 function 並寫在 `src/services/openai.ts` 內
